public static string DecryptAesDatabase(byte[] encryptedData)
        {
            using (var ms = new MemoryStream(encryptedData))
            {
                using (var decryptor = _databaseAes!.CreateDecryptor())
                using (var cs = new CryptoStream(ms, decryptor, CryptoStreamMode.Read))
                using (var sr = new StreamReader(cs, Encoding.UTF8))
                {
                    return sr.ReadToEnd();
                }
            }
        }

        public static byte[] DecryptAesDatabaseByte(byte[] encryptedData)
        {

            var decryptor = _databaseAes!.CreateDecryptor();

            using var ms = new MemoryStream(encryptedData);
            using var cs = new CryptoStream(ms, decryptor, CryptoStreamMode.Read);
            using var resultStream = new MemoryStream();
            cs.CopyTo(resultStream);
            return resultStream.ToArray();
        }

        public static string DecryptAesDatabase(string encryptedData)
        {
            var dataBytes = Convert.FromBase64String(encryptedData);
            using (var ms = new MemoryStream(dataBytes))
            {
                using (var decryptor = _databaseAes!.CreateDecryptor())
                using (var cs = new CryptoStream(ms, decryptor, CryptoStreamMode.Read))
                using (var sr = new StreamReader(cs, Encoding.UTF8))
                {
                    return sr.ReadToEnd();
                }
            }
        }

        private static byte[] DecryptAes(WebSocket client, byte[] encryptedData)
        {
            if (Server._clientsData.TryGetValue(client, out var userData))
            {
                (_, Aes aes) = userData;
                var decryptor = aes.CreateDecryptor();

                using var ms = new MemoryStream(encryptedData);
                using var cs = new CryptoStream(ms, decryptor, CryptoStreamMode.Read);
                using var resultStream = new MemoryStream();
                cs.CopyTo(resultStream);
                return resultStream.ToArray();
            }

            throw new Exception("Not encrypted with Aes");
        }

        public static byte[] EncryptAesDatabaseByte(byte[] dataToEncrypt)
        {
            if (dataToEncrypt == null || dataToEncrypt.Length == 0)
                throw new ArgumentException("Data to encrypt cannot be null or empty", nameof(dataToEncrypt));

            using (var ms = new MemoryStream())
            {
                using (ICryptoTransform encryptor = _databaseAes!.CreateEncryptor())
                {
                    using (var cryptoStream = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))
                    {
                        cryptoStream.Write(dataToEncrypt, 0, dataToEncrypt.Length);
                        cryptoStream.FlushFinalBlock();
                    }
                }

                return ms.ToArray();
            }
        }

        public static string EncryptAesDatabase(string dataToEncrypt)
        {
            if (dataToEncrypt == null || dataToEncrypt.Length == 0)
                throw new ArgumentException("Data to encrypt cannot be null or empty", nameof(dataToEncrypt));

            var dataBytes = Encoding.UTF8.GetBytes(dataToEncrypt);
            using (var ms = new MemoryStream())
            {
                using (ICryptoTransform encryptor = _databaseAes!.CreateEncryptor())
                {
                    using (var cryptoStream = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))
                    {
                        cryptoStream.Write(dataBytes, 0, dataBytes.Length);
                        cryptoStream.FlushFinalBlock();
                    }
                }

                return Convert.ToBase64String(ms.ToArray());
            }
        }
